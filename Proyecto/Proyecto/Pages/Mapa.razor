@page "/mapa"
@attribute [Authorize]
@inject IJSRuntime JS


<div class="container">
    <h2 class="alert alert-success">Mapa de Vehiculos</h2>
    <div id="map"></div>
<div id="contenedor" class="contenedor-modal-none">
    <div class="ventana">

        <div class="card" >

          
            <div class="card-header ">
                <div class="form-group">
           
                    <input id="matricula" class="form-control-plaintext text-center " style="font-weight:bold" readonly />
                </div>
            </div>
            <div class="card-body ">
                <input id="data" class="form-control" @bind="data" @bind:event="OnInput" @onchange="Cambio" type="hidden" disabled />

                <div class="form-group">

                    <img id="foto" height="100" width="100" />
                </div>
                <div class="form-group">

                    <input id="marca" style="font-weight:bold" class="form-control-plaintext " readonly />
                </div>
                <div class="form-group">

                    <input id="modelo" style="font-weight:bold" class="form-control-plaintext " readonly />
                </div>
                <div class="form-group">

                    <input id="year" style="font-weight:bold" class="form-control-plaintext " readonly disabled />
                </div>
                <div class="form-group">

                    <input id="color" style="font-weight:bold" class="form-control-plaintext " readonly disabled />
                </div>
                <div class="form-group">
                    @if (vofFecha)
                    {
                        <h4>Proximas Fechas</h4>
                        @if (reservas.Count() >= 1)
                        {
                            @foreach (var x in reservas)
                            {

                                <p>Desde @x.Desde - Hasta @x.Hasta</p>

                            }
                        }
                        else
                        {
                            <p>No hay proximas fechas</p>
                        }
                    }

                </div>
            </div>
            <div class="card-footer">

                <button class="btn btn-danger btn-block" @onclick="Close">CERRAR</button>

            </div>

        </div>

       
  
    </div>
</div>


</div>



@code {


    List<Vehiculos> vehiculos;
    List<Reservas2> reservas;
    bool vofCarga = false;
    bool vofFecha = false;
    string data = "";
   

    DateTime fecha = DateTime.Now;

    protected override async Task OnAfterRenderAsync(bool x)
    {



        HttpClient http = new HttpClient();

        string URI = "https://finalprog3-930fc-default-rtdb.firebaseio.com/Vehiculos.json";

        var res = await http.GetAsync(URI);

        if (res.IsSuccessStatusCode)
        {
            var content = await res.Content.ReadAsStringAsync();

            var data1 = JsonConvert.DeserializeObject<Dictionary<string, Vehiculos>>(content).ToList();

            var data2 = from xd in data1
                        select new Vehiculos
                        {
                            ID = xd.Key,
                            Carga = xd.Value.Carga,
                            Color = xd.Value.Color,
                            Estado = xd.Value.Estado,
                            Foto = xd.Value.Foto,
                            Lat = xd.Value.Lat,
                            Lng = xd.Value.Lng,
                            Marca = xd.Value.Marca,
                            Matricula = xd.Value.Matricula,
                            Modelo = xd.Value.Modelo,
                            Pasajeros = xd.Value.Pasajeros,
                            Price = xd.Value.Price,
                            Seguro = xd.Value.Seguro,
                            Tipo = xd.Value.Tipo,
                            Year = xd.Value.Year
                        };

            vehiculos = data2.ToList();

            var array2 = JsonConvert.SerializeObject(data2.ToList(), Formatting.Indented);
            if (x)
            {
                await JS.InvokeVoidAsync("iMapa", array2);
                vofCarga = true;
                StateHasChanged();
            }



        }



    }


    async Task Cambio(ChangeEventArgs e)
    {
        vofFecha = false;
        data = e.Value.ToString();
        await CargarDatos();
    }

    async Task Close()
    {
        await JS.InvokeVoidAsync("close");
    }


    async Task CargarDatos()
    {

        HttpClient http = new HttpClient();

        string URI = "https://finalprog3-930fc-default-rtdb.firebaseio.com/Reservas.json";

        var res = await http.GetAsync(URI);

        if(res.IsSuccessStatusCode)
        {

            var content = await res.Content.ReadAsStringAsync();

            var data1 = JsonConvert.DeserializeObject<Dictionary<string, Reservas2>>(content).ToList();

            var data2 = from xd in data1
                        select new Reservas2
                        {
                            ID = xd.Key,
                            Desde = Convert.ToDateTime(xd.Value.Desde),
                            Hasta = Convert.ToDateTime(xd.Value.Hasta),
                            VehiculoID = xd.Value.VehiculoID,
                            Estado = xd.Value.Estado

                        };

            reservas = data2.Where(x => x.Desde > fecha && x.VehiculoID == data).OrderBy(x => x.Desde).Take(3).ToList();
       
            vofFecha = true;

        }
    }

}
